// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.0--rc2
// source: runtimeIntent.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuntimeIntentClient is the client API for RuntimeIntent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeIntentClient interface {
	// 应用
	Init(ctx context.Context, in *InitIntent, opts ...grpc.CallOption) (*Result, error)
	Start(ctx context.Context, in *StartIntent, opts ...grpc.CallOption) (*Result, error)
	Restart(ctx context.Context, in *RestartIntent, opts ...grpc.CallOption) (*Result, error)
	Stop(ctx context.Context, in *StopIntent, opts ...grpc.CallOption) (*Result, error)
	// 获取应用健康状态
	GetStatus(ctx context.Context, in *GetStatusIntent, opts ...grpc.CallOption) (*APPStatus, error)
	// 迁移相关
	//
	//	rpc migrate (MigateIntent) returns (Result) {}
	Store(ctx context.Context, in *StoreIntent, opts ...grpc.CallOption) (*Result, error)
	Restore(ctx context.Context, in *RestoreIntent, opts ...grpc.CallOption) (*Result, error)
}

type runtimeIntentClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeIntentClient(cc grpc.ClientConnInterface) RuntimeIntentClient {
	return &runtimeIntentClient{cc}
}

func (c *runtimeIntentClient) Init(ctx context.Context, in *InitIntent, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RuntimeIntent/init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeIntentClient) Start(ctx context.Context, in *StartIntent, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RuntimeIntent/start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeIntentClient) Restart(ctx context.Context, in *RestartIntent, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RuntimeIntent/restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeIntentClient) Stop(ctx context.Context, in *StopIntent, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RuntimeIntent/stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeIntentClient) GetStatus(ctx context.Context, in *GetStatusIntent, opts ...grpc.CallOption) (*APPStatus, error) {
	out := new(APPStatus)
	err := c.cc.Invoke(ctx, "/RuntimeIntent/getStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeIntentClient) Store(ctx context.Context, in *StoreIntent, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RuntimeIntent/store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeIntentClient) Restore(ctx context.Context, in *RestoreIntent, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RuntimeIntent/restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeIntentServer is the server API for RuntimeIntent service.
// All implementations must embed UnimplementedRuntimeIntentServer
// for forward compatibility
type RuntimeIntentServer interface {
	// 应用
	Init(context.Context, *InitIntent) (*Result, error)
	Start(context.Context, *StartIntent) (*Result, error)
	Restart(context.Context, *RestartIntent) (*Result, error)
	Stop(context.Context, *StopIntent) (*Result, error)
	// 获取应用健康状态
	GetStatus(context.Context, *GetStatusIntent) (*APPStatus, error)
	// 迁移相关
	//
	//	rpc migrate (MigateIntent) returns (Result) {}
	Store(context.Context, *StoreIntent) (*Result, error)
	Restore(context.Context, *RestoreIntent) (*Result, error)
	mustEmbedUnimplementedRuntimeIntentServer()
}

// UnimplementedRuntimeIntentServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeIntentServer struct {
}

func (UnimplementedRuntimeIntentServer) Init(context.Context, *InitIntent) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedRuntimeIntentServer) Start(context.Context, *StartIntent) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedRuntimeIntentServer) Restart(context.Context, *RestartIntent) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedRuntimeIntentServer) Stop(context.Context, *StopIntent) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedRuntimeIntentServer) GetStatus(context.Context, *GetStatusIntent) (*APPStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedRuntimeIntentServer) Store(context.Context, *StoreIntent) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedRuntimeIntentServer) Restore(context.Context, *RestoreIntent) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedRuntimeIntentServer) mustEmbedUnimplementedRuntimeIntentServer() {}

// UnsafeRuntimeIntentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeIntentServer will
// result in compilation errors.
type UnsafeRuntimeIntentServer interface {
	mustEmbedUnimplementedRuntimeIntentServer()
}

func RegisterRuntimeIntentServer(s grpc.ServiceRegistrar, srv RuntimeIntentServer) {
	s.RegisterService(&RuntimeIntent_ServiceDesc, srv)
}

func _RuntimeIntent_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeIntentServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RuntimeIntent/init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeIntentServer).Init(ctx, req.(*InitIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeIntent_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeIntentServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RuntimeIntent/start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeIntentServer).Start(ctx, req.(*StartIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeIntent_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeIntentServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RuntimeIntent/restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeIntentServer).Restart(ctx, req.(*RestartIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeIntent_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeIntentServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RuntimeIntent/stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeIntentServer).Stop(ctx, req.(*StopIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeIntent_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeIntentServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RuntimeIntent/getStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeIntentServer).GetStatus(ctx, req.(*GetStatusIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeIntent_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeIntentServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RuntimeIntent/store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeIntentServer).Store(ctx, req.(*StoreIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeIntent_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeIntentServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RuntimeIntent/restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeIntentServer).Restore(ctx, req.(*RestoreIntent))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeIntent_ServiceDesc is the grpc.ServiceDesc for RuntimeIntent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeIntent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RuntimeIntent",
	HandlerType: (*RuntimeIntentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "init",
			Handler:    _RuntimeIntent_Init_Handler,
		},
		{
			MethodName: "start",
			Handler:    _RuntimeIntent_Start_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _RuntimeIntent_Restart_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _RuntimeIntent_Stop_Handler,
		},
		{
			MethodName: "getStatus",
			Handler:    _RuntimeIntent_GetStatus_Handler,
		},
		{
			MethodName: "store",
			Handler:    _RuntimeIntent_Store_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _RuntimeIntent_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtimeIntent.proto",
}
