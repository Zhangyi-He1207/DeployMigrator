# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
from runtime_interface import runtimeIntent_pb2 as runtimeIntent__pb2 # 当你从项目根目录运行主程序时 runtimeIntent_pb2_grpc.py中的 import runtimeIntent_pb2会失败，因为：Python 只在根目录和系统路径中搜索 runtimeIntent_pb2,找不到 runtime_interface包里的文件

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in runtimeIntent_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RuntimeIntentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.init = channel.unary_unary(
                '/RuntimeIntent/init',
                request_serializer=runtimeIntent__pb2.InitIntent.SerializeToString,
                response_deserializer=runtimeIntent__pb2.Result.FromString,
                _registered_method=True)
        self.start = channel.unary_unary(
                '/RuntimeIntent/start',
                request_serializer=runtimeIntent__pb2.StartIntent.SerializeToString,
                response_deserializer=runtimeIntent__pb2.Result.FromString,
                _registered_method=True)
        self.restart = channel.unary_unary(
                '/RuntimeIntent/restart',
                request_serializer=runtimeIntent__pb2.RestartIntent.SerializeToString,
                response_deserializer=runtimeIntent__pb2.Result.FromString,
                _registered_method=True)
        self.stop = channel.unary_unary(
                '/RuntimeIntent/stop',
                request_serializer=runtimeIntent__pb2.StopIntent.SerializeToString,
                response_deserializer=runtimeIntent__pb2.Result.FromString,
                _registered_method=True)
        self.getStatus = channel.unary_unary(
                '/RuntimeIntent/getStatus',
                request_serializer=runtimeIntent__pb2.GetStatusIntent.SerializeToString,
                response_deserializer=runtimeIntent__pb2.APPStatus.FromString,
                _registered_method=True)
        self.store = channel.unary_unary(
                '/RuntimeIntent/store',
                request_serializer=runtimeIntent__pb2.StoreIntent.SerializeToString,
                response_deserializer=runtimeIntent__pb2.Result.FromString,
                _registered_method=True)
        self.restore = channel.unary_unary(
                '/RuntimeIntent/restore',
                request_serializer=runtimeIntent__pb2.RestoreIntent.SerializeToString,
                response_deserializer=runtimeIntent__pb2.Result.FromString,
                _registered_method=True)


class RuntimeIntentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def init(self, request, context):
        """应用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """获取应用健康状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def store(self, request, context):
        """迁移相关
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RuntimeIntentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=runtimeIntent__pb2.InitIntent.FromString,
                    response_serializer=runtimeIntent__pb2.Result.SerializeToString,
            ),
            'start': grpc.unary_unary_rpc_method_handler(
                    servicer.start,
                    request_deserializer=runtimeIntent__pb2.StartIntent.FromString,
                    response_serializer=runtimeIntent__pb2.Result.SerializeToString,
            ),
            'restart': grpc.unary_unary_rpc_method_handler(
                    servicer.restart,
                    request_deserializer=runtimeIntent__pb2.RestartIntent.FromString,
                    response_serializer=runtimeIntent__pb2.Result.SerializeToString,
            ),
            'stop': grpc.unary_unary_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=runtimeIntent__pb2.StopIntent.FromString,
                    response_serializer=runtimeIntent__pb2.Result.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=runtimeIntent__pb2.GetStatusIntent.FromString,
                    response_serializer=runtimeIntent__pb2.APPStatus.SerializeToString,
            ),
            'store': grpc.unary_unary_rpc_method_handler(
                    servicer.store,
                    request_deserializer=runtimeIntent__pb2.StoreIntent.FromString,
                    response_serializer=runtimeIntent__pb2.Result.SerializeToString,
            ),
            'restore': grpc.unary_unary_rpc_method_handler(
                    servicer.restore,
                    request_deserializer=runtimeIntent__pb2.RestoreIntent.FromString,
                    response_serializer=runtimeIntent__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RuntimeIntent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RuntimeIntent', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RuntimeIntent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RuntimeIntent/init',
            runtimeIntent__pb2.InitIntent.SerializeToString,
            runtimeIntent__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RuntimeIntent/start',
            runtimeIntent__pb2.StartIntent.SerializeToString,
            runtimeIntent__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RuntimeIntent/restart',
            runtimeIntent__pb2.RestartIntent.SerializeToString,
            runtimeIntent__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RuntimeIntent/stop',
            runtimeIntent__pb2.StopIntent.SerializeToString,
            runtimeIntent__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RuntimeIntent/getStatus',
            runtimeIntent__pb2.GetStatusIntent.SerializeToString,
            runtimeIntent__pb2.APPStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RuntimeIntent/store',
            runtimeIntent__pb2.StoreIntent.SerializeToString,
            runtimeIntent__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def restore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RuntimeIntent/restore',
            runtimeIntent__pb2.RestoreIntent.SerializeToString,
            runtimeIntent__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
